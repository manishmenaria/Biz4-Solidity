// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract Banking is ERC721, ERC721URIStorage, Pausable, Ownable, ERC721Burnable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    IERC20 public tokenAddress;

    constructor(IERC20 _tokenAddress) ERC721("KYC", "KYC") {
        tokenAddress = _tokenAddress;
    }

    struct kycId {
        bool status;
        uint256 amountApproved;
    }
    event Status(string currentStatus, uint256 amount);

    mapping(uint256 => kycId) public checkStatus;

    mapping(uint256 => address) private kycAddress;

    mapping(uint256 => bool) public bankStatusChecked;

    mapping(uint256 => bool) public claimed;

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function safeMint(address to, string memory uri) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
        kycAddress[tokenId] = msg.sender;
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(from, to, tokenId, batchSize);
    }

    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
    //This will change the status from unchecked to checked;
    function setStatus(uint256 _tokenId, bool _status, uint256 _amtApproved)public onlyOwner{
        require(kycAddress[_tokenId] == ownerOf(_tokenId),"Kyc Owner Invalid");
        require(!bankStatusChecked[_tokenId],"Already updated the status");
        checkStatus[_tokenId].status = _status;
        checkStatus[_tokenId].amountApproved = _amtApproved;
        bankStatusChecked[_tokenId] = true;
        tokenAddress.approve(kycAddress[_tokenId], _amtApproved);
    }

    //This will Transfer money into customer wallet
    function claimAmount(uint256 _tokenId, address _to, uint256 _amount) public {
        require(!claimed[_tokenId],"Already claimed the Loan");
        require(kycAddress[_tokenId] == ownerOf(_tokenId),"Kyc Owner Invalid");
        require(checkStatus[_tokenId].status == true,"Loan not Approved");
        require(checkStatus[_tokenId].amountApproved == _amount, "Amount mismatch");
        tokenAddress.transfer(_to, _amount);
        claimed[_tokenId] = true;
    }

    function checkCryptoBalance(address _add) public view returns(uint256){
        return tokenAddress.balanceOf(_add);
    }

    function withDrawFromSmartContract(address _add, uint256 _amt) public onlyOwner{
        tokenAddress.transfer(_add, _amt);
    }

}
